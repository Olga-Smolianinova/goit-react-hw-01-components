{"version":3,"sources":["components/Profile/Profile.module.css","components/Statistics/Statistics.module.css","components/FriendList/FriendListItem/FriendListItem.module.css","components/FriendList/FriendList.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Profile/default.jpg","components/Profile/Profile.js","components/Statistics/Statistics.js","components/FriendList/FriendListItem/default.jpg","components/FriendList/FriendListItem/FriendListItem.js","components/FriendList/FriendList.js","components/TransactionHistory/TransactionHistory.js","App.js","index.js"],"names":["module","exports","Profile","name","tag","location","avatar","followers","views","likes","className","s","description","src","alt","width","stats","label","quantity","defaultProps","defaultImg","Statistics","title","statList","map","id","percentage","color","item","style","backgroundColor","FriendListItem","isOnline","online","offline","FriendList","friendsData","friends__list","TransactionHistory","items","type","amount","currency","App","userData","statisticalData","transactions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.192967d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundColor\":\"#e5e5e5\",\"description\":\"Profile_description__28jGX\",\"avatar\":\"Profile_avatar__3A9Zx\",\"name\":\"Profile_name__2ciEO\",\"tag\":\"Profile_tag__3u2_e\",\"location\":\"Profile_location__1cEkq\",\"stats\":\"Profile_stats__1QEX4\",\"label\":\"Profile_label__qQgNG\",\"quantity\":\"Profile_quantity__3VnP3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistics_title__bIluk\",\"statList\":\"Statistics_statList__u4kiE\",\"label\":\"Statistics_label__33mj5\",\"percentage\":\"Statistics_percentage__pp1LU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundColor\":\"#e5e5e5\",\"status\":\"FriendListItem_status__1-YS5\",\"online\":\"FriendListItem_online__2wtsk FriendListItem_status__1-YS5\",\"offline\":\"FriendListItem_offline__3IFis FriendListItem_status__1-YS5\",\"avatar\":\"FriendListItem_avatar__3X4lp\",\"name\":\"FriendListItem_name__208tv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FriendList_title__29ez0\",\"friends__list\":\"FriendList_friends__list__3yv35\",\"item\":\"FriendList_item__1AiiJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundColor\":\"#e5e5e5\",\"title\":\"TransactionHistory_title__3h-Ps\",\"item\":\"TransactionHistory_item__2xESa\"};","export default __webpack_public_path__ + \"static/media/default.2e01288c.jpg\";","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport s from './Profile.module.css'; //підключення стилей\r\n\r\nimport defaultImg from './default.jpg'; //картинка для default\r\n\r\nconst Profile = ({\r\n  name,\r\n  tag,\r\n  location,\r\n  avatar,\r\n  // stats,\r\n  followers,\r\n  views,\r\n  likes,\r\n}) => {\r\n  return (\r\n    <div className=\"section\">\r\n      <div className={s.description}>\r\n        <img src={avatar} alt={name} width=\"150\" className={s.avatar} />\r\n        <p className={s.name}>{name}</p>\r\n        <p className={s.tag}>@{tag}</p>\r\n        <p className={s.location}>{location}</p>\r\n      </div>\r\n\r\n      <ul className={s.stats}>\r\n        <li>\r\n          <span className={s.label}>Followers</span>\r\n          <span className={s.quantity}> {followers}</span>\r\n        </li>\r\n\r\n        <li>\r\n          <span className={s.label}>Views</span>\r\n          <span className={s.quantity}> {views}</span>\r\n        </li>\r\n\r\n        <li>\r\n          <span className={s.label}>Likes</span>\r\n          <span className={s.quantity}> {likes}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// для описания свойств по default\r\n// console.dir(Profile);\r\nProfile.defaultProps = {\r\n  avatar: defaultImg,\r\n};\r\n\r\n// для описания propTypes, для каждого компонента где есть props. Описание всех props, которые указали в параметрах или шаблоне\r\nProfile.propTypes = {\r\n  avatar: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  // stats: PropTypes.number.isRequired,\r\n  followers: PropTypes.number.isRequired,\r\n  views: PropTypes.number.isRequired,\r\n  likes: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport s from './Statistics.module.css'; //підключення стилей\r\n\r\nconst Statistics = ({ title, stats }) => (\r\n  <section className=\"section\">\r\n    <h2 className={s.title}>{title}</h2>\r\n    <ul className={s.statList}>\r\n      {stats.map(({ id, label, percentage, color }) => (\r\n        <li key={id} className={s.item} style={{ backgroundColor: color }}>\r\n          <span className={s.label}>{label}</span>\r\n          <span className={s.percentage}> {percentage}%</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </section>\r\n);\r\n\r\n// для описания propTypes, для каждого компонента где есть props. Описание всех props, которые указали в параметрах или шаблоне\r\nStatistics.propTypes = {\r\n  stats: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      percentage: PropTypes.number.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","export default __webpack_public_path__ + \"static/media/default.2e01288c.jpg\";","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport defaultImg from './default.jpg'; //картинка для default\r\n\r\nimport s from './FriendListItem.module.css'; //підключення стилей\r\n\r\nconst FriendListItem = ({ avatar, name, isOnline }) => (\r\n  <>\r\n    <span className={isOnline ? s.online : s.offline}>{isOnline}</span>\r\n    <img className={s.avatar} src={avatar} alt={name} width=\"48\" />\r\n    <p className={s.name}>{name}</p>\r\n  </>\r\n);\r\n\r\n// для описания свойств по default\r\nFriendListItem.defaultProps = {\r\n  avatar: defaultImg,\r\n};\r\n\r\n// для описания propTypes, для каждого компонента где есть props. Описание всех props, которые указали в параметрах или шаблоне\r\nFriendListItem.propTypes = {\r\n  avatar: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  isOnline: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default FriendListItem;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FriendListItem from './FriendListItem/FriendListItem';\r\n\r\nimport s from './FriendList.module.css'; //підключення стилей\r\n\r\nconst FriendList = ({ friendsData }) => (\r\n  <section className=\"section\">\r\n    <h2 className={s.title}>Friends</h2>\r\n    <ul className={s.friends__list}>\r\n      {friendsData.map(({ id, avatar, name, isOnline }) => (\r\n        <li key={id} className={s.item}>\r\n          <FriendListItem avatar={avatar} name={name} isOnline={isOnline} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </section>\r\n);\r\n\r\n// для описания propTypes, для каждого компонента где есть props. Описание всех props, которые указали в параметрах или шаблоне\r\nFriendList.propTypes = {\r\n  friendsData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      avatar: PropTypes.string,\r\n      id: PropTypes.number.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default FriendList;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport s from './TransactionHistory.module.css'; //підключення стилей\r\n\r\nconst TransactionHistory = ({ items }) => (\r\n  <table className=\"section\">\r\n    <thead>\r\n      <tr className={s.title}>\r\n        <th>Type</th>\r\n        <th>Amount</th>\r\n        <th>Currency</th>\r\n      </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n      {items.map(({ id, type, amount, currency }) => (\r\n        <tr className={s.item} key={id}>\r\n          <td>{type}</td>\r\n          <td> {amount}</td>\r\n          <td> {currency}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\n// для описания propTypes, для каждого компонента где есть props. Описание всех props, которые указали в параметрах или шаблоне\r\nTransactionHistory.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      amount: PropTypes.string.isRequired,\r\n      currency: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default TransactionHistory;\r\n","// App.js - главный компонент (обертка) создаваемого приложения;\r\n// Компоненты обязательно называются с большой буквы. В одном файл - прописываем работу только одного компонента;\r\n// компонент - это функция, куда мы закидываем настроийки, а на выходе получаем Virtual DOM, который потом рендерится в настоящий DOM.\r\n\r\nimport React from 'react'; //обзятельно import React  в каждый файл, чтобы использовать JSX и он мог  скомпилироваться и транспайлиться\r\n\r\n// 1. Profile\r\nimport Profile from './components/Profile/Profile'; //import Profile из Profile.js для вставки части кода\r\n\r\nimport userData from './datadase/user.json'; //database of user\r\n// console.log(userData);\r\n\r\n//2. Statistics\r\nimport Statistics from './components/Statistics/Statistics';\r\n\r\nimport statisticalData from './datadase/statistical-data.json';\r\n\r\n//3. FriendList\r\nimport FriendList from './components/FriendList/FriendList';\r\n\r\nimport friendsData from './datadase/friends.json';\r\n\r\n// 4. TransactionHistory\r\nimport TransactionHistory from './components/TransactionHistory/TransactionHistory';\r\n\r\nimport transactions from './datadase/transactions.json';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      {/* 1. рендерим и вставляем часть кода из components/Profile/Profile.js */}\r\n      <Profile\r\n        name={userData.name}\r\n        tag={userData.tag}\r\n        location={userData.location}\r\n        avatar={userData.avatar}\r\n        // stats={userData.stats}\r\n        followers={userData.stats.followers}\r\n        views={userData.stats.views}\r\n        likes={userData.stats.likes}\r\n      />\r\n      {/* 2. рендерим и вставляем часть кода из components/Statistics/Statistics.js */}\r\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\r\n      {/* <Statistics stats={statisticalData} /> */}\r\n      {/* 3.  рендерим и вставляем часть кода из components/FriendList/FriendList.js */}\r\n      <FriendList friendsData={friendsData} />\r\n\r\n      {/* 4.  рендерим и вставляем часть кода из components/TransactionHistory/TransactionHistory.js */}\r\n      <TransactionHistory items={transactions} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react'; // import React, чтобы могли использовать createElement для создания ссылки;\n\nimport ReactDOM from 'react-dom'; // import ReactDOM чтобы Virtual DOM зарендерил что-либо в настоящий DOM;\n\nimport App from './App'; //import функции App из  App.js - главного компонента (обертки) создаваемого приложения;\n\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nimport styles from './styles.css';\n\n// рендерим код из Аpp.js - главного компонента (обертки) создаваемого приложения;\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n// но лучше использовать нижеследующую запись, т.к. React.StrictMode (строгий режим), т.к. это инструмент для обнаружения потенциальных проблем в приложении. Строгий режим активирует доп.проверки и предупреждения для своих потомков.\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// для работы с Virtual DOM (VD):\n// - сперва создаем элемент VD или React-element (самый маленький строительный блок React);\n// - указать, что хотели бы этот элемент зарендерить;\n// -  после этого VD превратит его в настоящий <tag-element> и вставит в DOM.\n\n// console.log(React);\n// const link = React.createElement(\n//   \"a\",\n//   { href: \"https://reactjs.org/\" },\n//   \"Ссылка на reactjs.org\"\n// ); //в параметрах указываем: 1) <tag-element>, который хотим создать; 2) дополнительные атрибуты <tag-element>. Они еще называются PROPS или свойства создаваемого будущего компонената и то, что ему будет передано; 3) CHILDREN - то, что стоит между открывающим и закрывающим тегом (<a href=\"\">...CHILDREN...</a>)\n// console.log(link);\n\n// перепишем код для большей читабельности и удобства с помощью JSX - специальный шаблонизатор, который при помощи Babel под капотом трансформирует JSX-код в вызовы React.createElement()\n// const jsxLink = <a href=\"https://reactjs.org/\">Ссылка на reactjs.org</a>;\n// console.log(jsxLink);\n\n// Чтобы ссылку из VD перенести в настоящий DOM - ее нужно зарендерить. В Свойстве render нужно указать, что именно (link) и где (ссылка на <div id=\"root\"></div> из index.html) нужно отобразить в реальном  DOM\n// console.log(ReactDOM);\n// ReactDOM.render(jsxLink, document.getElementById(\"root\"));\n"],"sourceRoot":""}